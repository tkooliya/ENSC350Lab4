Task 2a:

Lab doc pseudo-code:
j = 0
for i = 0 to 255 {
    j = (j + s[i] + secret_key[i mod keylength] ) mod 256 //keylength is 3 in our impl.
    swap values of s[i] and s[j]
}

Modified pseudo-code:
j = 0
for i = 0 to 255 {
    temp = s[i]
    j = (j + temp + secret_key[i mod keylength] ) mod 256
    s[i] = s[j]
    s[j] = temp
}

cycle 1:
    read s[i]

cycle 2:
    temp := q            // s[i]
    next_j := j + q + secret_key[i mod length]  // s[i]
    j <= next_j

cycle 3:
    read s[j]

cycle 4:
    write s[i] <= q     // s[j]

cycle 5:
    write s[j] <= temp
    i := i + 1



Task 2b:

Lab doc pseudo-code:

i = 0, j = 0
for k = 0 to message_length-1 { // message_length is 32 in our implementation
    i = (i + 1) mod 256
    j = (j + s[i]) mod 256

    swap values of s[i] and s[j]

    f = s[ (s[i] + s[j]) mod 256 ]
    decrypted_output[k] = f xor encrypted_input[k] // 8 bit wide XOR function
}


Modified pseudo-code:

i = 0, j = 0
for k = 0 to message_length-1 { // message_length is 32 in our implementation
    i = (i + 1) mod 256
    s_i = s[i]

    j = (j + s_i) mod 256
    s_j = s[j]
    
    s[i] = s_j
    s[j] = s_i

    f = s[ (s_i + s_j) mod 256 ]

    decrypted_output[k] = f xor encrypted_input[k] // 8 bit wide XOR function
}


cycle 1: read_i
    i <= i + 1
    read s[i + 1]

cycle 2: read_j
    s_i <= q_mem                // s[i]
    j <= j + q_mem
    read s[j + q_mem]

cycle 3: write_i
    s_j <= q_mem                // s[j]
    write s[i] <= q_mem

cycle 4: write_j
    write s[j] <= s_i

cycle 5: read_k
    read s[s_i + s_j]
    read encrypted_input[k]

cycle 6: write_k
    f := q_mem                  // s[s_i + s_j], no register needed for f
    write decrypted_output[k] <= (q_mem xor q_rom) // encrypted_input[k]
    k <= k + 1


Task 2b checker:

#include <stdio.h>
#include <stdlib.h>

int main()
{
    short s[256];
    short d[32];
    short rom[32] = {
        55,
        32,
        235,
        151,
        215,
        146,
        79,
        162,
        231,
        208,
        231,
        149,
        131,
        242,
        111,
        110,
        170,
        140,
        194,
        171,
        134,
        170,
        69,
        139,
        227,
        164,
        139,
        85,
        127,
        115,
        86,
        119
    };
    
    for(int i = 0; i < 256; i++) {
        s[i] = i;
    }
    
    //EDIT THESE TO MATCH YOUR KEY
    short secretKey[3] = {0x00, 0x31, 0xff};
    
    unsigned j = 0;
    for (int i = 0; i < 256; i++) {
        j = (j + s[i] + secretKey[i % 3]) % 256;
        short valOfSi = s[i];
        short valOfSj = s[j];
        s[i] = valOfSj;
        s[j] = valOfSi;
    }
    
    unsigned i = 0;
    j = 0;
    for(unsigned k = 0; k < 32; k++) {
        i = (i + 1) % 256;
        j = (j + s[i]) % 256;
        
        short s_i = s[i];
        short s_j = s[j];
        s[i] = s_j;
        s[j] = s_i;
        
        short f = s[(s[i] + s[j]) % 256];
        d[k] = f ^ rom[k];
    }
    
    for(int i = 1; i <= 256; i++) {
        printf("%02x ", s[i-1]);
        if(!(i%0x10) && i) {
            printf("\n");
        }
    }
    
    printf("\n");
    
    for(int k = 0; k < 32; k++) {
        printf("%x ", d[k]);
    }
    
    printf("\n");
    
    for(int k = 0; k < 32; k++) {
        printf("%c", d[k]);
    }

    return 0;
}
